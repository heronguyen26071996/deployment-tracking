{"version":3,"sources":["routes.js","App.js","serviceWorker.js","index.js"],"names":["Loading","LoadableLogin","Loadable","loader","loading","LoadableHome","LoadableContact","LoadableView","LoadableEdit","routes","path","exact","main","Home","useState","expanded","setexpanded","style","setstyle","setselectKey","footer","setfooter","NavHeader","styled","div","props","NavTitle","NavSubTitle","NavFooter","console","log","window","location","pathname","split","NavInfoPane","className","onClickOutside","render","history","Fragment","display","onToggle","onSelect","selected","to","Modal","confirm","title","icon","ExclamationCircleOutlined","content","okText","cancelText","cancelButtonProps","type","onOk","onCancel","push","Toggle","Nav","defaultSelected","eventKey","FileAddOutlined","fontSize","FolderViewOutlined","LoginOutlined","marginLeft","span","result","length","map","route","index","key","component","showRouter","Boolean","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01443853.chunk.js","sourcesContent":["import React from 'react'\r\nimport Loadable from 'react-loadable'\r\nconst Loading = () => <div>Loading...</div>\r\nconst LoadableLogin = Loadable({\r\n    loader() {\r\n        return import('./components/Login')\r\n    },\r\n    loading: Loading\r\n})\r\n\r\nconst LoadableHome = Loadable({\r\n    loader() {\r\n        return import('./components/Home')\r\n    },\r\n    loading: Loading\r\n})\r\n\r\nconst LoadableContact = Loadable({\r\n    loader() {\r\n        return import('./components/Products')\r\n    },\r\n    loading: Loading\r\n})\r\nconst LoadableView = Loadable({\r\n    loader() {\r\n        return import('./components/Report')\r\n    },\r\n    loading: Loading\r\n})\r\nconst LoadableEdit = Loadable({\r\n    loader() {\r\n        return import('./components/Contact')\r\n    },\r\n    loading: Loading\r\n})\r\nconst routes = [\r\n    {\r\n        path: '/home',\r\n        exact: true,\r\n        main: () => <LoadableHome />\r\n    },\r\n\r\n    {\r\n        path: '/add',\r\n        exact: true,\r\n        main: () => <LoadableContact />\r\n    },\r\n    {\r\n        path: '/login',\r\n        exact: true,\r\n        main: () => <LoadableLogin />\r\n    }\r\n    ,\r\n    {\r\n        path: '/view',\r\n        exact: true,\r\n        main: () => <LoadableView />\r\n    }\r\n    ,\r\n    {\r\n        path: '/edt/:id',\r\n        exact: true,\r\n        main: () => <LoadableEdit />\r\n    }\r\n]\r\n\r\nexport default routes\r\n","import React, {  useState } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport SideNav, { NavItem, NavIcon, NavText } from \"@trendmicro/react-sidenav\";\r\nimport { Modal, message,Row,Col } from \"antd\";\r\n\r\nimport './index.css'\r\nimport {\r\n  LoginOutlined,\r\n  FileAddOutlined,\r\n  ExclamationCircleOutlined,\r\n  FolderViewOutlined,\r\n} from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport ClickOutside from \"react-click-outside\";\r\nimport \"@trendmicro/react-sidenav/dist/react-sidenav.css\";\r\nimport routes from \"./routes\";\r\nfunction Home() {\r\n  const [expanded, setexpanded] = useState(false);\r\n  const [style, setstyle] = useState(80);\r\n  const [selectKey,setselectKey]=useState('add');\r\n  const [footer,setfooter]=useState('none');\r\n  let showRouter = (routes) => {\r\n    var result = null;\r\n\r\n    if (routes.length > 0) {\r\n      result = routes.map((route, index) => {\r\n        return (\r\n          <Route\r\n            key={index}\r\n            path={route.path}\r\n            exact={route.exact}\r\n            component={route.main}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const NavHeader = styled.div`\r\n    display: ${(props) => (props.expanded ? \"block\" : \"none\")};\r\n    white-space: nowrap;\r\n    background-color: #225cc3;\r\n    color: #fff;\r\n\r\n    > * {\r\n      color: inherit;\r\n      background-color: inherit;\r\n    }\r\n  `;\r\n\r\n  // height: 20px + 10px + 10px = 40px\r\n  const NavTitle = styled.div`\r\n    font-size: 1.5em;\r\n    line-height: 20px;\r\n    padding: 10px 0;\r\n  `;\r\n\r\n  // height: 20px + 4px = 24px;\r\n  const NavSubTitle = styled.div`\r\n    font-size: 1em;\r\n    line-height: 20px;\r\n    padding-bottom: 4px;\r\n  `;\r\n  const NavFooter = styled.div`\r\n   font-size: 1.2em;\r\n    line-height: 20px;\r\n  position: fixed;\r\n  margin-bottom: 10px;\r\n    margin-left: 70px;\r\n  bottom: 0;\r\n  display:${footer}\r\n`;\r\nconsole.log(window.location.pathname.split('/')[1])\r\n  const NavInfoPane = styled.div`\r\n    float: left;\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    background-color: #225cc3;\r\n  `;\r\n\r\n \r\n  function cancel(e) {\r\n    console.log(e);\r\n    message.error(\"Click on No\");\r\n  }\r\n  function confirm() {\r\n    Modal.confirm({\r\n      title: \"Đăng xuất\",\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: \"Bạn có muốn đăng xuất hay không ? ...\",\r\n      okText: \"Có\",\r\n      cancelText: \"Không\",\r\n      cancelButtonProps: { type: \"danger\" },\r\n      onOk() {\r\n       window.location.pathname='/login'\r\n      },\r\n      onCancel() {\r\n      },\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"dvModal\">\r\n      <ClickOutside\r\n        onClickOutside={() => {\r\n          setexpanded(false);\r\n          setstyle(80);\r\n        }}\r\n      >\r\n        <Router>\r\n          <Route\r\n            render={({ location, history }) => (\r\n              <React.Fragment>\r\n                <SideNav\r\n                  style={{\r\n                    display:\r\n                      window.location.pathname == \"/login\" ? \"none\" : \"block\",\r\n                  }}\r\n                  expanded={expanded}\r\n                  onToggle={(expanded) => {\r\n                    setexpanded(expanded);\r\n                    if (expanded) {\r\n                      setfooter('block')\r\n                      setstyle(250);\r\n                    } else {\r\n                      setfooter('none')\r\n                      setstyle(80);\r\n                    }\r\n                  }}\r\n                  onSelect={(selected) => {\r\n                 setselectKey(selected);\r\n                 console.log(selected)\r\n                    const to = \"/\" + selected;\r\n                    if(selected==='login')\r\n                    {\r\n                      confirm();\r\n                    }\r\n                    if (location.pathname !== to && selected!='login') {\r\n                      history.push(to);\r\n                    }\r\n                  }}\r\n                >\r\n                  <SideNav.Toggle />\r\n                  <NavHeader expanded={expanded}>\r\n                    <NavTitle>Side Navigation</NavTitle>\r\n                    <NavSubTitle>Styled Side Navigation</NavSubTitle>\r\n                  </NavHeader>\r\n                  {expanded && (\r\n                    <NavInfoPane>\r\n                     \r\n                    </NavInfoPane>\r\n                  )}\r\n                  <NavFooter>Version 2020</NavFooter>\r\n                  <SideNav.Nav defaultSelected={window.location.pathname.split('/')[1]}>\r\n                    <NavItem eventKey=\"add\">\r\n                      <NavIcon>\r\n                        <FileAddOutlined style={{ fontSize: \"1.25em\" }} />\r\n                      </NavIcon>\r\n                      <NavText>Thêm báo cáo công việc</NavText>\r\n                    </NavItem>\r\n                    <NavItem eventKey=\"view\">\r\n                      <NavIcon>\r\n                        <FolderViewOutlined style={{ fontSize: \"1.25em\" }} />\r\n                      </NavIcon>\r\n                      <NavText>Xem báo cáo công việc</NavText>\r\n                    </NavItem>\r\n\r\n                    <NavItem eventKey=\"login\">\r\n                      <NavIcon>\r\n                        <LoginOutlined style={{ fontSize: \"1.25em\" }} />\r\n                      </NavIcon>\r\n                      <NavText>Đăng xuất</NavText>\r\n                    </NavItem>\r\n                  </SideNav.Nav>\r\n                \r\n                </SideNav>\r\n                {\" \"}\r\n                <main  style={{marginLeft:style}}>\r\n                  <Row>\r\n                    <Col span={24}>\r\n                      \r\n                    </Col>\r\n                  </Row>\r\n                  {showRouter(routes)}\r\n                </main>\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n        </Router>\r\n      </ClickOutside>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}